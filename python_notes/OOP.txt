* modelling the problem with classes and interaction between these classes


* attribute of an object, class: fields and methods of an object, class


* class naming convention: CamelCase


* object variables are specific to the object itself,
whereas class variables are shared among the objects created from that class


* for readability purposes, object methods should be called with object reference
and class methods should be called with class reference 
even though it is possible to call object methods with class references
and possible to call class methods with object references


* by convention, ‘self’ is used for object references, and ‘cls’ is used for class references


* class methods: functions available under the class namespace


* object&instance methods: functions available under the object&instance namespace


* instantiation: the process of creating an instance&object of a class
my_obj = MyClass()
type(my_obj)
    __main__.MyClass
    # __main__ shows that MyClass had been defined in the script you ran


* accessing class variables withing object methods
MyClass.class_var
self.__class__.class_var
self.class_var


* dunder&magic&special methods
used to perform class-specific operations
dunder is abbreviation of double-underscore
syntax: __<method>__()
__init__(): constructor method, called during instantiation
__repr__(): string representation of the object, must return a string value


* the problem of default list value on construction method: different objects share the same list.
def __init__(self):
    self.list = [ ]  # objects have their own list.

def __init__(self, list = [ ]):
    self.list = [ ]  # objects have their own list.

def __init__(self, list = [ ]):
    self.list = list  # objects share the same list.


* object variable vs class variable with the same name

class Test:
    population = 0

    def __init__(self) -> None:
        self.__class__.population += 1

t1 = Test()
t2 = Test()
print(Test.population)
print(t1.population)
# output: 2
# output: 2

class Test:
    population = 0

    def __init__(self) -> None:
        self.population += 1

t1 = Test()
t2 = Test()
print(Test.population)
print(t1.population)
# output: 0
# output: 1

# this shows that if there is no object variable with the same name as class variable,
# the object uses the class variable. if there is, then it uses the object variable.
# So, object variable with the same name as class variable overrides the class variable

# every object refers to its class with ‘__class__’ attribute.
# So, instead of ‘Test.population’ we can use ‘self.__class__.population’ to reach the class variable.
# With that, we also eliminated the need for the class reference (cls)
# and the dependence on the class name (Test).
# So if the class name changes, the code won’t break


* ‘@classmethod’ decorator is required for class methods
class Test:
    population = 0
    def increase_population(cls):
        cls.population += 1

Test.increase_population()
# output: TypeError: Test.increase_population() missing 1 required positional argument: 'cls'

class Test:
    population = 0
    @classmethod
    def increase_population(cls):
        cls.population += 1

Test.increase_population()
print(Test.population)
# output: 1


*
class Test
    population = 0

t = Test()
Test.population += 1
t.population += 2
print(Test.population, t.population)
    # 1 3
    # object variable with the same name with class variable
    #   overrides the class variable