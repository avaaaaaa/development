glossary
    git: an open source, distributed version-control system
    GitHub: a platform for hosting and collaborating on Git repositories
    commit: a Git object, a snapshot of your entire repository compressed into a SHA
    branch: A branch is a parallel version of a repository.
      It is contained within the repository, but does not affect the primary or main branch
        allowing you to work freely without disrupting the "live" version.
      When you've made the changes you want to make,
        you can merge your branch back into the main branch to publish your changes.
    clone: a local version of a repository, including all commits and branches
    remote: a common repository on GitHub that all team member use to exchange their changes
    fork: a copy of a repository on GitHub owned by a different user
    pull request: a place to compare and discuss the differences
      introduced on a branch with reviews, comments, integrated tests, and more
    HEAD: representing your current working directory.
      the HEAD pointer can be moved to different branches, tags, or commits when using 'git checkout'
    for reference
      https://docs.github.com/en/get-started/learning-about-github/github-glossary
      https://git-scm.com/docs/gitglossary

git(local) -> github, gitlab(remote)

github flow: illustration at second page of github-cheat-sheet

.gitignore file
    the files&directories in ".gitignore" are not tracked with git
    create this file in the root directory of the git repository
    If you want to ignore a file that is already checked in,
      untrack the file first.
        git rm --cached <file_name>
      then add a rule to ignore it
    reference
      https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files
      https://git-scm.com/docs/gitignore        

** check if git is installed
git --version

** configuration
# use "--global" flag if you want to apply to all local repositories
git config [--global] user.name "[name]"
git config [--global] user.email "[email_address]"
git config [--global] color.ui auto

** check configuration
git config [--global] user.name
git config [--global] user.email



** create repos
git init
    turns the current working directory into a git repo

git clone [url]
    clone(download) a repo that already exists on github



** branch operations
git status
    shows the current branch and the current status

git branch --help
    get help

git branch
    shows local branches and the current branch
    the current branch is marked with an asterisk

git branch -r
    shows remote branches

git branch -a
    shows all branches

git branch <branch>
    creates a new branch called <branch>

git branch (-m, -M) <branch>
    rename the current branch as <branch>

git branch (-d, -D) <branch>
    deletes <branch> branch

git branch -u <upstream> [branch]
    Set up <branch>'s tracking information,
      so <upstream> is considered <branch>'s upstream branch
    If no <branch> is specified, then it defaults to the current branch.

git branch --unset-upstream [<branch>]
    Remove the upstream information for <branch>
    If no branch is specified, it defaults to the current branch.

git checkout <branch>
    switches to the <branch> and updates working directory

git merge <branch>
    merges <branch> into the current branch
    this is usually done in pull requests

git diff <branch>
    shows the difference between the current branch and <branch>



** workflow
states
    1. unstaged
    2. staged
    3. committed

git status
    shows the current states on the current branch

git log
    lists version history for the current branch

1 -> 2
    git add .
      tracks all files
    git add <file>

2 -> 1
    "git reset ." | "git reset"
      unstages all staged files
    git reset <file>
    git restore --staged [<file> | .]

2 -> 3
    git commit -m "<message>"
      If multiple -m options are given, their values are concatenated as separate paragraphs.

1 -> 3
    git commit -am "<message>"
      only works for tracked modified files

to discard changes of modified files in unstaged state
  this cannot be done for modified files in staged state
    git restore [<file> | .]
    git checkout [<file> | .]

to see changes of modified files in unstaged state
  this cannot be done for modified files in staged state
    "git diff ." | "git diff"
    git diff <file>

git reset [--hard] <commit>
    Undoes all commits after <commit>, preserving changes locally



** remote operations
git remote --help
    get help

git remote
    shows existing remotes

git remote add <name> <URL>
    add a remote named <name> for the repository at <URL>
    this associates the <name> with the <URL>
    <name> is set 'origin' by convention

git remote get-url <name>
    get the URL of the remote called <name>

git remote set-url <name> <newurl>
    set the URL of the remote called <name>

git push -u <remote> <local_branch>
    'local -> remote' operation
    set <remote> as upstream and push <local_branch> to <remote>
    from now on, <local_branch> will track its remote counterpart
    * git push -u origin main
        branch 'main' set up to track 'origin/main'
    after that, we can use 'git push' for that operation.
      it is not needed to set upstream every single time.
      but if '-u <remote>' is not specified at first push operation,
        following error will occur:
        fatal: The current branch 'test' has no upstream branch


git fetch
    'remote -> local' operation
    'fea' branch is created at github
    but 'fea' is not known by local git
      error: the requested upstream branch 'origin/fea' does not exist
      we can also check it with 'git branch -r'
        there is no 'origin/fea' upstream branch on the output
    with 'git fetch', local git updates upstream branches
      now 'origin/fea' is available

    similarly, a document is updated at github
    but this update is not known by local git
    'git status' still show that 'main' is up to date with 'origin/main'
    after 'git fetch', changes made at github is retrieved by local git
    now 'git status' shows that 'main' branch is behind 'origin/main' by 1 commit

    so, in short
      When you use 'git fetch'
        you're adding changes from the remote repository
        to your local working branch without committing them.
      Unlike 'git pull', fetching allows you to review changes
        before committing them to your local branch.


git merge
    'remote -> local' operation
    Combines remote tracking branch into current local branch

git pull
    'remote -> local' operation
    update local git with upstream branch
    Incorporates changes from a remote repository into the current branch
    a combination of 'git fetch' and 'git merge'

